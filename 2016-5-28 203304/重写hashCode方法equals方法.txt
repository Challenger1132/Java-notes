import java.util.HashSet;
import java.util.Set;


public class SetDemo {

	public static void main(String[] args) {
		Set<Student> s = new HashSet<Student>();
		s.add(new Student("宋江",40));
		s.add(new Student("宋江",42));
		s.add(new Student("李逵",34));
		s.add(new Student("宋江",40));
		s.add(new Student("武松",30));
		s.add(new Student("武松",30));
		for(Student ss : s){
			System.out.println(ss);
		}
	}
}
class Student{
	private String name;
	private int age;
	public String getName() {
		return name;
	}
	public int getAge() {
		return age;
	}
	public Student(String name, int age){
		this.name = name;
		this.age = age;
	}
	public String toString(){
		return "[" + name + "," + age + "]";
	}
	//一下是自动生成的方法
//	@Override
//	public int hashCode() {
//		final int prime = 31;
//		int result = 1;
//		result = prime * result + age;
//		result = prime * result + ((name == null) ? 0 : name.hashCode());
//		return result;
//	}
//	@Override
//	public boolean equals(Object obj) {
//		if (this == obj)
//			return true;
//		if (obj == null)
//			return false;
//		if (getClass() != obj.getClass()) //不是同一类
//			return false;
//		Student other = (Student) obj;
//		if (age != other.age)
//			return false;
//		if (name == null) {
//			if (other.name != null)
//				return false;
//		} else if (!name.equals(other.name))
//			return false;
//		return true;
//	}
	
	
	
    //重写hashCode()方法一	
//	public int hashCode(){
//		return 0;  //这里既是返回相同的值，也能保证set里面的元素是不同的
//	}
	
	//重写hashCode()方法二
	
	public int hashCode(){
		int prime = 13;
		return this.name.hashCode() + this.age * prime;
}
	public boolean equals(Object obj){
		if(this == obj)
			return true;
		if(!(obj instanceof Student))
			return false;
		Student s = (Student)obj;
		return this.age == s.age && this.name.equals(s.name);
		//这里思考s能取到Student的私有属性name和age吗？不用调用get方法？
		//不用因为equals()方法是同类中的方法，访问控制符是透明的各成员之间可以相互访问
	}
}