/*
join()方法，暂停当前正在执行t.join()的线程，当t所对应的线程执行完毕后再执行当前线程
	t1.start();
	t2.start();
	try
	{
		t2.join();
	}
	catch(InterruptedException e)
	{
		e.printStackTrace();
	}
// t1、t2开辟了两个线程，调用t2.join()当t2所对应的线程执行完毕后t1所对应的线程才开始执行
// 若将其改为t1.join()则当t1所对应的线程执行完毕后t2所对应的线程才开始执行
这里有点小问题？？？？？？？？？？？？？？？？
主线程中调用t1.join()则暂停主线程，当t1所对应的线程执行完毕后，在执行主线程

*/
class A implements Runnable
{
	public void run()
	{
		for(int i = 0;i < 10;i ++)
		{
			try
			{
				Thread.sleep(1000);
			}
			catch(InterruptedException e)
			{
				e.printStackTrace();
			}
			System.out.printf("T1----%d\n",i);
		}
	}
}
class B implements Runnable
{
	public void run()
	{
		for(int i = 0;i < 10;i ++)
		{
			try
			{
				Thread.sleep(1000);
			}
			catch(InterruptedException e)
			{
				e.printStackTrace();
			}
			System.out.printf("T2----%d\n",i);
		}
	}
}
class TestThread_5
{
	public static void main(String[] args)
	{
		Thread t1 = new Thread(new A());
		Thread t2 = new Thread(new B());
		t1.start();
		t2.start();
		try
		{
		    t2.join();
		}
		catch(InterruptedException e)
		{
			e.printStackTrace();
		}
		// for(int i = 0;i < 10;i ++)
		// {
			// try
			// {
				// Thread.sleep(1000);
			// }
			// catch(InterruptedException e)
			// {
				// e.printStackTrace();
			// }
			// System.out.printf("主线程----%d\n",i);
		// }
	}
}