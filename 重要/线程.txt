20、线程：
[1]、Thread(Runnable target, String name)  是Thread类的其中一个构造方法，
target是实现了Runnable接口的类对象name指定线程的名字
static Thread currentThread()   返回对当前正在执行的线程对象的引用。
[2]、注意join()方法，tha.join(),该行代码所在的线程等待调用join()方法的tha线程所设定的时间，
而不管tha线程什么时候结束，就等待tha线程所设定的时间，如果join()方法没有设定时间，
则等待tha所代表的线程执行完毕，再执行tha.join()代码所在的线程
主线程调用子线程，子线程调用了join()方法，主线程等待子线程join()方法所设定的时间，不管子线程什么时候执行完毕
时间一到就会执行主线程，如果没有设定时间，则主线程等待子线程执行完毕，再执行子线程
为什么要用join()方法
在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，
主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，
也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了，让主线程等待子线程执行完毕主线程再结束。
[3]、yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。
使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，
因为让步的线程还有可能被线程调度程序再次选中。yield()不是导致线程转到等待/睡眠/阻塞状态。
在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果
[4]、Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，
以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。
[5]、sleep()和yield()的区别
sleep()和yield()的区别):sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；
yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。
sleep 方法使当前运行中的线程睡眼一段时间，进入不可运行状态，这段时间的长短是由程序设定的，
yield 方法使当前线程让出 CPU 占有权，但让出的时间是不可设定的。实际上，yield()方法对应了如下操作：
先检测当前是否有相同优先级的线程处于同可运行状态，如有，则把 CPU  的占有权交给此线程，否则，
继续运行原来的线程。所以yield()方法称为“退让”，它把运行机会让给了同等优先级的其他线程
另外，sleep 方法允许较低优先级的线程获得运行机会，但yield()方法执行时，当前线程仍处在可运行状态，
所以，不可能让出较低优先级的线程些时获得 CPU 占有权。在一个运行系统中，如果较高优先级的线程没有调用
sleep方法，又没有受到 I\O 阻塞，那么，较低优先级线程只能等待所有较高优先级的线程运行结束，才有机会运行。 
[4]、main方法其实也是一个线程。在java中所有的线程都是同时启动的，至于什么时候，哪个先执行，
完全看谁先得到CPU的资源。在java中，每次程序运行至少启动2个线程。一个是main线程，
一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，
实际上都会启动一个ＪＶＭ，每一个JＶＭ实际就是在操作系统中启动了一个进程。
和其他多数计算机语言不同，Java内置支持多线程编程（multithreaded programming）。

多线程程序包含两条或两条以上并发运行的部分。程序中每个这样的部分都叫一个线程（thread），每个线程都有独立的执行路径
因此，多线程是多任务处理的一种特殊形式。

进程(process)本质上是一个执行的程序。
因此，基于进程(process-based) 的多任务处理的特点是允许你的计算机同时运行两个或更多的程序(听音乐的同时，浏览网页)
在基于线程(thread-based) 的多任务处理环境中，线程是最小的执行单位。
这意味着一个程序可以同时执行两个或者多个任务的功能。例如，一个文本编辑器可以在打印的同时格式化文本

多线程程序比多进程程序需要更少的管理费用。进程是重量级的任务，需要分配它们自己独立的地址空间
进程间通信是昂贵和受限的。进程间的转换也是很需要花费的。另一方面，线程是轻量级的选手。
它们共享相同的地址空间并且共同分享同一个进程。
线程间通信是便宜的，线程间的转换也是低成本的。当Java程序使用多进程任务处理环境时，多进程程序不受Java的控制，而多线程则受Java控制。
多线程帮助你写出CPU最大利用率的高效程序，因为空闲时间保持最低。这对Java运行的交互式的网络互连环境是至关重要的，因为空闲时间是公共的。
举个例子来说，网络的数据传输速率远低于计算机处理能力，本地文件系统资源的读写速度远低于CPU的处理能力，
当然，用户输入也比计算机慢很多。在传统的单线程环境中，你的程序必须等待每一个这样的任务完成以后才能执行
下一步――尽管CPU有很多空闲时间，多线程使你能够获得并充分利用这些空闲时间。

操作系统的设计，因此可以归结为三点：
（1）以多进程形式，允许多个任务同时运行；
（2）以多线程形式，允许单个任务分成不同的部分运行；
（3）提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。

车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存
多个线程同时读写某一块内存区域