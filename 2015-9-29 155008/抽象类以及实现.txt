/*
1、有抽象方法的类一定是抽象类，抽象类不一定有抽象方法
1.1、没有方法体的方法称为抽象方法
1.2、抽象类不能生成对象
1.3、一个父类引用，既可以指向父类引用，也可以指向子类引用，如果将一个抽象类变成非抽象类，必须将抽象类中所有的抽象方法实现，
可以只加括号不写内容，也就是空实现
2、可以将子类引用赋予父类引用，通过父类引用可以访问子类从父类继承的方法
//(或继承后改写的方法),不能访问子类中特有的方法，当父类引用实际指向的是
一个子类引用时可以将父类引用强制转换成子类引用，而不报错
3、一个父类引用，既可以指向父类引用，也可以指向子类引用，
父类引用会根据当前时刻指向的不同，而自动调用不同对象中的方法---->多态
*/
abstract class A //A是一个抽象类
{
	abstract public void f(); //抽象类没有方法体，前面要有abstract关键字
	abstract public void g(); 
}
class B extends A  //B继承A，B是抽象类，因为将A中所有的抽象方法进行了实现，所以B是非抽象类
{
	public void f() 
	{
		System.out.printf("hello world !\n");
	}
	public void g() //要将一个类变成非抽象类，必须将里面的所欲抽象方法实现
	{
		System.out.printf("hello tomorrow !\n");
	}
}
class TestAbstract
{
	public static void main(String[] args)
	{
		// A aa = new A();//error 错误: A是抽象的; 无法实例化
		B bb = new B();
		bb.f();
		bb.g();
		A aa;//  OK 抽象类虽然不能生成对象但是可以只有抽象类的引用
		aa = bb;// 将子类引用赋予父类引用，通过父类引用可以访问之类从父类中继承的方法
		aa.f();//多态的知识
		aa.g();
	}
}