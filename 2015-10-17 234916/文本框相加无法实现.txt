
/*
   这里两个类中的成员都访问同一个类A中的成员，这两个类中都定义了类A
的对象，通过类对象的方式进行访问，也就是在一个类中定义另一个类的属性，
但是这两个类中的A对象不是同一个对象，因此文本框相加的功能就无法实现

一个类Monitor中的方法要访问另一个类Text_2中的成员，由于tf1、tf2、tf3是方法中的局部变量
所以不能在另一个类的方法中进行访问，因此要将tf1、tf2、tf3定义为类的属性

将实现交由一个类来实现，并不都在主方法之中，这样程序逻辑更加清楚
可以将Button bt定义为TF类的属性，Button bt也可以直接是Text_4类中main方法的局部变量
*/
import java.awt.*;
import java.awt.event.*;

class Text_6
{
	public static void main(String[] args) //main方法是类中的一个方法
		{
			TF tf = new TF();
			tf.launch();
		}

}
class TF //将实现交由一个类来实现，并不都在主方法之中，这样程序逻辑更加清楚
{
	public TextField tf1,tf2,tf3;  //tf1,tf2,tf3定义为类的属性，在另一类中可以进行访问
										  //可由另一个类中的属性访问，另一个类的方法访问
    //public static Button bt = new Button("=");
	public void launch()
	{
		Frame f = new Frame("文本框相加");//f是类的局部变量
		tf1 = new TextField(15);
		tf2 = new TextField(15);
		tf3 = new TextField(15);
		Button bt = new Button("=");   //如果不定义为类的属性，Button类bt就是类方法的局部变量
		Label label = new Label("+");  //label是类的局部变量
		f.setLayout(new FlowLayout());
		f.add(tf1);
		f.add(label);
		f.add(tf2);
		f.add(bt);
		f.add(tf3);
		f.setVisible(true);
		bt.addActionListener(new Monitor());
	}
} 			//Monitor类中的成员访问TF类中的成员，并不像视频里面所讲不能进行访问

class Monitor implements ActionListener
{
	TF tf = new TF();
	@Override
	public void actionPerformed(ActionEvent e)
	{
		int num1 = Integer.parseInt(tf.tf1.getText());//有与属性tf1、tf2、tf3是静态的，
						//所以可以通过类名点成员名的方式进行访问
						//这里是一个类中的方法(actionPerformed)访问另一个类中的属性(tf1)
		int num2 = Integer.parseInt(tf.tf2.getText());
		int num3 = num1 + num2;
		tf.tf3.setText(num3 + "");//将num3的值转化为字符串
	}
}