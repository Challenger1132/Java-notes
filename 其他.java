/*
TCP
	TCP是面向有连接的数据通信，不支持广播通信
	紧急比特URG，当URG＝1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)
	能够探知到接收方处理能力,当接收方大量数据未接收时,会停止继续发送新数据
host文件
	Hosts是一个没有扩展名的系统文件,windows下存在C:\Windows\System32\drivers\etc位置，linux下存在/etc位置
	其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”
	当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址
	一旦找到，系统会立即打开对应网页，如果没有找到，则系统再会将网址提交DNS域名解析服务器进行IP地址的解析
	用户可以直接为host文件进行控制
关于IP地址和子网
	IP地址包含网络地址和主机地址，其中可由主机地址分离出一些位来作为子网地址，斜线后的数字是表示用多少位来表示网络地址
	划分两个子网，就是占用一位主机位
	4位可以划分16个子网
	也就是牺牲一定的主机位来划分不同的子网
web表单登录中用到的图形验证码的实现,发送到客户端的只有图片形式的验证码，
服务器端保存cookie对应的图形验证码的正确文本。客户端表单提交时到服务器端验证

UNIX提供了两种文件共享机制：
基于索引节点的共享方式(硬链接)和利用符号连实现文件共享(软链接)
	硬链接实现原理：
	系统为共享文件新建一个目录项，该目录项的文件名可以跟原共享文件不同，
	而目录项中的索引节点编号为原共享文件的索引节点编号。为避免文件主删除原共享文件而造成“悬空指针”的错误
	在索引节点中增加一个共享计数count，用于指示当前有多少用户在共享该文件。
	软链接实现原理：
	系统为共享文件新建一个link类型的新文件，该新文件的文件名可以跟原共享文件不同，
	系统将为该新文件建立目录项、分配索引节点和磁盘空间，新文件的内容即为原共享文件路径。
	这样用户就可以通过新文件名去访问原共享文件了
	优缺点比较：
	硬链接不需要建立新文件，只建立目录项，比软链接节省了磁盘空间；当有两个以上用户共享文件时，
	硬链接中不允许文件主删除共享文件，对文件主不方便，而软链接没有这种限制；
	硬链接不能跨文件卷共享，而软链接可以，且软连接可以方便的实现网络文件的共享；
	软链接中访问共享文件时，需进行两次路径查询（新文件路径及共享文件路径），查询效率比硬链接低。

我们知道文件都有文件名与数据，这在 Linux 上被分成两个部分：用户数据 (user data) 
与元数据 (metadata)。用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方；
而元数据则是文件的附加属性，如文件大小、创建时间、所有者等信息。
在 Linux 中，元数据中的 inode 号（inode 是文件元数据的一部分但其并不包含文件名，
inode 号即索引节点号）才是文件的唯一标识而非文件名。文件名仅是为了方便人们的记忆和使用，
系统或程序通过 inode 号寻找正确的文件数据块
fileName ---> inode ---> data block
			metaData      userData
Linux系统为解决文件共享使用引入了硬链接和软连接
inode 是文件元数据的一部分,是文件的唯一标识而非文件名
那么当一个inode对应多个文件名的时候，这些文件就是硬链接，硬链接就是同一个文件使用了多个别名，
他们的iNode相同
硬链接可由命令 link 或 ln 创建，如下是对文件 oldfile 创建硬链接
	link oldfile newfile 
	ln oldfile newfile
由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性：
	文件有相同的 inode 及 data block；
	只能对已存在的文件进行创建；
	不能交叉文件系统进行硬链接的创建；
	不能对目录进行创建，只可对文件创建；
	删除一个硬链接文件并不影响其他有相同 inode号的文件

软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向则该文件就是软连接
软链接就是一个普通文件，只是数据块内容有点特殊
	硬链接是另一个文件的别名，他们之间有相同的iNode值，软连接就是一个普通文件，
	文件中的内容是另一文件的路径名的指向，他和源文件是完全独立的，只是他的用户数据块是另一个文件的路径指向
	软链接有着自己的 inode 号以及用户数据块，因此软链接的创建与使用没有类似硬链接的诸多限制：
	软链接有自己的文件属性及权限等；
	可对不存在的文件或目录创建软链接；
	软链接可交叉文件系统
	软链接可对文件或目录创建；
	创建软链接时，链接计数 i_nlink 不会增加；
	删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接
	即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接
	对一个文件创软连接原文件的路径指向使用绝对路径较好，如果愿文件是相对路径，当该文件的
	软连接移动位置的时候会变成死链接，相反如果建立该软连接的时候，原文件是绝对路径，无论该文件的
	软链接如何移动，都是有效的
软连接可以连接目录，而硬链接不可以链接目录
软连接可以跨分区进行链接，而硬链接不可以跨分区，更不可以跨磁盘作链接，这是由于硬链接的inode号是针对分区来说的，inode在分区里才有实际意义

每个inode都有一个号码，操作系统用inode号码来识别不同的文件。Linux系统内部不使用文件名，而使用inode号码来识别文件
对于系统来说，文件名只是inode号码便于识别的别称或绰号，表面上用户通过文件名打开文件，实际上系统内部过程分三步：
首先系统找到这个文件名对应的inode号码；其次通过inode号获取inode信息；最后根据inode信息找到文件数据所在的block，读出数据
使用ls -i命令，可以看到文件名对应的inode号： 
ls –i example.txt

make 依赖于Makefile这个文件进行构建，Makefile可以写成makefile，或者命令行参数指定其他文件名
make -f rules.txt
make --file=rules.txt
以上指定make按照rules.txt中的规则进行构建
make只是一个根据指定的Shell命令(构建规则)进行构建的工具
make命令执行时，需要一个 makefile 文件，以告诉make命令如何去编译和链接程序

linux 文件系统中文件类型：普通文件、目录文件、块设备文件、字符设备文件、
管道文件、符号链接文件、 socket 文件
 
GNU是一个自由操作系统，其内容软件完全以GPL方式发布
GPL GNU general public license 
